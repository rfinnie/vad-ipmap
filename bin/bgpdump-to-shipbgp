#!/usr/bin/env python3

# bgpdump-to-shipbgp - Convert bgpdump single-line data to "sh ip bgp"
# Copyright (C) 2015-2020 Ryan Finnie
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import argparse
import sys
import time


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        "--quiet", "-q", dest="quiet", action="store_true", help="quiet mode"
    )

    args = parser.parse_args()

    return args


args = parse_args()
is_tty = sys.stderr.isatty()

print("Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,")
print("              r RIB-failure, S Stale")
print("Origin codes: i - IGP, e - EGP, ? - incomplete")
print()
print("   Network            Next Hop            Metric LocPrf Weight Path")

last_network = None
lines_printed = 0
last_status_time = time.time()

for line in sys.stdin:
    i = line.split("|")
    if i[5] == last_network:
        printable_network = ""
    else:
        printable_network = i[5]
        last_network = i[5]
    if i[7] == "IGP":
        origin_s = "i"
    elif i[7] == "EGP":
        origin_s = "e"
    else:
        origin_s = "?"

    print(
        "*  {:<18} {:<19} {:>6} {:>6} {:>6} {} {}".format(
            printable_network, i[3], i[10], i[9], 0, i[6], origin_s
        )
    )
    lines_printed += 1

    now = time.time()
    if (not args.quiet) and is_tty and (now > (last_status_time + 1)):
        sys.stderr.write(
            "\r\x1b[KConverting: {} ({} lines)".format(i[5], lines_printed)
        )
        sys.stderr.flush()
        last_status_time = now

if (not args.quiet) and is_tty:
    sys.stderr.write("\r\x1b[K")
