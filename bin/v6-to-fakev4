#!/usr/bin/env python3

# v6-to-fakev4
# Copyright (C) 2015-2020 Ryan Finnie
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import argparse
import ipaddress
import re
import sys

import yaml


class V6toFakeV4:
    args = None
    config = None
    r_v6cidr_bare = re.compile(r"^([0-9a-f:]+)\/([0-9]+)(.*)$")

    def parse_args(self):
        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )

        parser.add_argument("--config", "-c", type=str, help="configuration yaml")

        self.args = parser.parse_args()

    def parse_config(self):
        self.config = {}
        if self.args.config:
            with open(self.args.config) as f:
                yaml_config = yaml.safe_load(f)

            if "v6_supernet" in yaml_config:
                self.config["v6_supernet"] = ipaddress.IPv6Network(
                    yaml_config["v6_supernet"]
                )

        if "v6_supernet" not in self.config:
            self.config["v6_supernet"] = ipaddress.IPv6Network("2000::/4")

    def get_match(self, line):
        match = re.match(self.r_v6cidr_bare, line)
        if match is None:
            return (None, line)

        (ip, cidr, rest) = match.groups()
        return (ipaddress.IPv6Network("{}/{}".format(ip, cidr)), rest)

    def main(self):
        self.parse_args()
        self.parse_config()
        supernet = self.config["v6_supernet"]

        for line in sys.stdin:
            (net, rest) = self.get_match(line)
            if (net is None) or (not net.subnet_of(self.config["v6_supernet"])):
                print(line, end="")
                continue

            fakecidr = net.prefixlen - supernet.prefixlen
            if fakecidr > 32:
                fakecidr = 32
            ip_32 = ipaddress.IPv4Address(
                (int(net.network_address) - int(supernet.network_address))
                >> (supernet.max_prefixlen - supernet.prefixlen - 32)
            )
            print("{}/{}{}".format(ip_32.compressed, fakecidr, rest))


if __name__ == "__main__":
    sys.exit(V6toFakeV4().main())
