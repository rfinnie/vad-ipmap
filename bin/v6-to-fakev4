#!/usr/bin/env python3

# v6-to-fakev4
# Copyright (C) 2015-2020 Ryan Finnie
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import argparse
import json
import re
import socket
import sys


r_v6cidr_bare = re.compile(r"^([0-9a-f:]+)\/([0-9]+)(.*)$")
V6_START = "2000::"
V6_LENGTH = 4


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("--config", "-c", type=str, help="configuration json")

    args = parser.parse_args()

    return args


def bytearray_to_int(b):
    out = 0
    for x in b:
        out = (out << 8) + x
    return out


def int_to_bytearray(i, minimum=1):
    out = bytearray()
    while i >= 256:
        out.insert(0, i & 0xFF)
        i = i >> 8
    out.insert(0, i)
    out_len = len(out)
    if out_len < minimum:
        out = bytearray(minimum - out_len) + out
    return out


def get_match(line):
    match = re.match(r_v6cidr_bare, line)
    if match is not None:
        v6net = bytearray_to_int(bytearray(socket.inet_pton(socket.AF_INET6, V6_START)))
        v6lower = v6net & (2 ** 128 - 2 ** V6_LENGTH)
        v6upper = v6lower + 2 ** (128 - V6_LENGTH) - 1
        (ip, cidr, rest) = match.groups()
        v6int = bytearray_to_int(bytearray(socket.inet_pton(socket.AF_INET6, ip)))
        if (v6int < v6lower) or (v6int > v6upper):
            return (None, None, None, True, line)
        int_32 = ((v6int - v6lower) & ((2 ** (128 - V6_LENGTH)) - 1)) >> (
            128 - 32 - V6_LENGTH
        )
        return (ip, int(cidr), int_32, True, rest)
    return (None, None, None, False, line)


args = parse_args()

if args.config:
    with open(args.config) as f:
        json_config = json.load(f)
    if "v6_start" in json_config:
        V6_START = json_config["v6_start"]
    if "v6_length" in json_config:
        V6_LENGTH = json_config["v6_length"]

for line in sys.stdin:
    (ip, cidr, int_32, is_ipv6, rest) = get_match(line)
    if int_32 is not None:
        fakecidr = cidr - V6_LENGTH
        if fakecidr > 32:
            fakecidr = 32
        print(
            "{}/{}{}".format(
                socket.inet_ntop(socket.AF_INET, int_to_bytearray(int_32, 4)),
                fakecidr,
                rest,
            )
        )
    else:
        print(line)
