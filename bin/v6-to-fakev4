#!/usr/bin/env python3

# v6-to-fakev4
# Copyright (C) 2015-2020 Ryan Finnie
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import argparse
import ipaddress
import json
import re
import sys


r_v6cidr_bare = re.compile(r"^([0-9a-f:]+)\/([0-9]+)(.*)$")
V6_START = "2000::"
V6_LENGTH = 4


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("--config", "-c", type=str, help="configuration json")

    args = parser.parse_args()

    return args


def get_match(line):
    match = re.match(r_v6cidr_bare, line)
    if match is None:
        return (None, line)

    (ip, cidr, rest) = match.groups()
    net = ipaddress.IPv6Network("{}/{}".format(ip, cidr))
    if not net.subnet_of(V6_SUPERNET):
        return (None, line)
    return (net, rest)


args = parse_args()

if args.config:
    with open(args.config) as f:
        json_config = json.load(f)
    if "v6_start" in json_config:
        V6_START = json_config["v6_start"]
    if "v6_length" in json_config:
        V6_LENGTH = json_config["v6_length"]

V6_SUPERNET = ipaddress.IPv6Network("{}/{}".format(V6_START, V6_LENGTH))

for line in sys.stdin:
    (net, rest) = get_match(line)
    if net is not None:
        fakecidr = net.prefixlen - V6_LENGTH
        if fakecidr > 32:
            fakecidr = 32
        ip_32 = ipaddress.IPv4Address(
            (
                (int(net.network_address) - int(V6_SUPERNET.network_address))
                & ((2 ** (128 - V6_LENGTH)) - 1)
            )
            >> (128 - 32 - V6_LENGTH)
        )
        print("{}/{}{}".format(ip_32.compressed, fakecidr, rest))
    else:
        print(line)
